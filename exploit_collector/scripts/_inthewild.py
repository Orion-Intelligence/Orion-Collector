from abc import ABC
from typing import List
from playwright.sync_api import Page
from crawler.crawler_instance.local_interface_model.leak.leak_extractor_interface import leak_extractor_interface
from crawler.crawler_instance.local_shared_model.data_model.entity_model import entity_model
from crawler.crawler_instance.local_shared_model.data_model.exploit_model import exploit_model
from crawler.crawler_instance.local_shared_model.rule_model import RuleModel, FetchProxy, FetchConfig
from crawler.crawler_services.redis_manager.redis_controller import redis_controller
from crawler.crawler_services.shared.helper_method import helper_method
from datetime import datetime
from time import sleep
from urllib.parse import urljoin


class _inthewild(leak_extractor_interface, ABC):
  _instance = None

  def __init__(self, callback=None):

    self.callback = callback
    self._card_data = []
    self._entity_data = []
    self.soup = None
    self._initialized = None
    self._redis_instance = redis_controller()

  def init_callback(self, callback=None):
    self.callback = callback

  def __new__(cls, callback=None):
    if cls._instance is None:
      cls._instance = super(_inthewild, cls).__new__(cls)
      cls._instance._initialized = False
    return cls._instance

  @property
  def seed_url(self) -> str:
    return "https://inthewild.io/feed"

  @property
  def base_url(self) -> str:
    return "https://inthewild.io"

  @property
  def rule_config(self) -> RuleModel:
    return RuleModel(m_fetch_proxy=FetchProxy.NONE, m_fetch_config=FetchConfig.PLAYRIGHT)

  @property
  def card_data(self) -> List[exploit_model]:
    return self._card_data

  @property
  def entity_data(self) -> List[entity_model]:
    return self._entity_data

  def invoke_db(self, command: int, key: str, default_value, expiry: int = None):
    return self._redis_instance.invoke_trigger(command, [key + self.__class__.__name__, default_value, expiry])

  def contact_page(self) -> str:
    return "https://x.com/inTheWildIO"

  def append_leak_data(self, leak: exploit_model, entity: entity_model):
    self._card_data.append(leak)
    self._entity_data.append(entity)
    if self.callback:
      self.callback()

  def parse_leak_data(self, page: "Page"):
    base_url = "https://inthewild.io"
    try:
      tab_button = page.query_selector("button[role='tab'][data-index='0']")
      if tab_button:
        tab_button.click()
        sleep(1)
      page.wait_for_selector('table.chakra-table tbody tr', timeout=30000)
      rows = page.query_selector_all('table.chakra-table tbody tr')
      exploitations_data = []
      for row in rows:
        title_elem = row.query_selector("td:nth-child(1) a")
        title = title_elem.inner_text().strip() if title_elem else None
        weblink = urljoin(base_url, title_elem.get_attribute("href")) if title_elem else None
        if not title or not weblink:
          continue
        exploitations_data.append({"title": title, "weblink": weblink})

      tab_button = page.query_selector("button[role='tab'][data-index='1']")
      if tab_button:
        tab_button.click()
        sleep(1)
      page.wait_for_selector('table.chakra-table tbody tr', timeout=30000)
      rows = page.query_selector_all('table.chakra-table tbody tr')
      exploits_data = []
      for row in rows:
        title_elem = row.query_selector("td:nth-child(1) a")
        title = title_elem.inner_text().strip() if title_elem else None
        weblink = urljoin(base_url, title_elem.get_attribute("href")) if title_elem else None
        if not title or not weblink:
          continue
        exploits_data.append({"title": title, "weblink": weblink})

      for tab_data in [exploitations_data, exploits_data]:
        for data in tab_data:
          page.goto(data["weblink"])
          page.wait_for_load_state("networkidle")
          sleep(0.5)

          ref_elem = page.query_selector("dt:has-text('Reference to the description:') + dd a")
          ref_url = ref_elem.get_attribute("href") if ref_elem else ""

          description = ""
          dt_nodes = page.query_selector_all("dt.css-yv1hg8")
          for dt in dt_nodes:
            if dt.inner_text().strip() == "Description:":
              parent = dt.evaluate_handle("node => node.parentNode")
              dd_siblings = parent.query_selector_all("dd.css-gwpoux")
              for sibling in dd_siblings:
                previous = sibling.evaluate_handle("node => node.previousElementSibling")
                if previous and previous.inner_text().strip() == "Description:":
                  description = sibling.inner_text().strip()
                  break
              if not description:
                dd = dt.evaluate_handle("node => node.nextElementSibling")
                if dd:
                  description = dd.inner_text().strip()
              break

          date_elem = page.query_selector("dt:has-text('Last updated date:') + dd")
          date_text = date_elem.inner_text().strip() if date_elem else ""
          leak_date = None
          if date_text:
            date_text_fmt = datetime.strptime(date_text, "%m/%d/%Y").strftime("%Y-%m-%d")
            leak_date = datetime.strptime(date_text_fmt, "%Y-%m-%d").date()

          report_cards = page.query_selector_all(".css-tbubqa")
          type_list, confidence_list, background_urls = [], [], []
          for card in report_cards:
            type_elem = card.query_selector("dt:has-text('Type:') + dd")
            conf_elem = card.query_selector("dt:has-text('Confidence:') + dd div")
            bg_elem = card.query_selector("dt:has-text('Reference url to background') + dd a")
            if type_elem:
              type_list.append(type_elem.inner_text().strip())
            if conf_elem:
              confidence_list.append(conf_elem.inner_text().strip())
            if bg_elem:
              background_urls.append(bg_elem.get_attribute("href"))

          websites = []
          if ref_url:
            websites.append(ref_url)
          websites.extend(background_urls)

          card_data = exploit_model(
            m_title=data["title"],
            m_url=page.url,
            m_base_url=base_url,
            m_content=data["title"],
            m_network=helper_method.get_network_type(base_url),
            m_important_content=data["title"],
            m_weblink=websites,
            m_content_type=["cve"],
            m_leak_date=leak_date
          )
          entity_data = entity_model(
            m_code_snippet=[description] if description else [],
            m_risk=[],
            m_remote_type=type_list,
            m_confidence=confidence_list,
            m_cve=[data["title"]],
            m_cwe=[],
          )
          self.append_leak_data(card_data, entity_data)
    except Exception:
      pass
