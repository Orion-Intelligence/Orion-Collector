from abc import ABC
from typing import List
from playwright.sync_api import Page
from crawler.crawler_instance.local_interface_model.leak.leak_extractor_interface import leak_extractor_interface
from crawler.crawler_instance.local_shared_model.data_model.entity_model import entity_model
from crawler.crawler_instance.local_shared_model.data_model.exploit_model import exploit_model
from crawler.crawler_instance.local_shared_model.data_model.leak_model import leak_model
from crawler.crawler_instance.local_shared_model.rule_model import RuleModel, FetchProxy, FetchConfig
from crawler.crawler_services.redis_manager.redis_controller import redis_controller
from crawler.crawler_services.shared.helper_method import helper_method
from datetime import datetime
from urllib.parse import urljoin
from time import sleep


class _cxsecurity(leak_extractor_interface, ABC):
    _instance = None

    def __init__(self, callback=None):
        self.callback = callback
        self._card_data = []
        self._entity_data = []
        self.soup = None
        self._initialized = None
        self._redis_instance = redis_controller()

    def init_callback(self, callback=None):
        self.callback = callback

    def __new__(cls, callback=None):
        if cls._instance is None:
            cls._instance = super(_cxsecurity, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    @property
    def seed_url(self) -> str:
        return "https://cxsecurity.com/exploit"

    @property
    def base_url(self) -> str:
        return "https://cxsecurity.com"

    @property
    def rule_config(self) -> RuleModel:
        return RuleModel(m_fetch_proxy=FetchProxy.NONE, m_fetch_config=FetchConfig.PLAYRIGHT)

    @property
    def card_data(self) -> List[leak_model]:
        return self._card_data

    @property
    def entity_data(self) -> List[entity_model]:
        return self._entity_data

    def invoke_db(self, command: int, key: str, default_value, expiry: int = None):
        return self._redis_instance.invoke_trigger(command, [key + self.__class__.__name__, default_value, expiry])

    def contact_page(self) -> str:
        return "https://x.com/cxsecurity"

    def append_leak_data(self, leak: exploit_model, entity: entity_model):
        self._card_data.append(leak)
        self._entity_data.append(entity)
        if self.callback:
            if self.callback():
                self._card_data.clear()
                self._entity_data.clear()

    def parse_leak_data(self, page: "Page"):
        base_url = "https://cxsecurity.com"
        collected_data = []
        current_page = 1
        page_limit = 86

        while current_page <= page_limit:
            try:
                page.wait_for_selector('table.table-striped.table-hover tbody tr', timeout=30000)
                rows = page.query_selector_all('table.table-striped.table-hover tbody tr')
                if not rows:
                    break

                for row_index, row in enumerate(rows):
                    title_elem = row.query_selector("td:nth-child(2) a")
                    title = title_elem.inner_text().strip() if title_elem else None
                    weblink = urljoin(base_url, title_elem.get_attribute("href")) if title_elem else None
                    if not title or not weblink:
                        continue
                    collected_data.append({
                        "title": title,
                        "weblink": weblink
                    })

                page.wait_for_selector("ul.pagination", timeout=30000)
                next_button = page.query_selector(f"ul.pagination li a[ng-click*='selectPage({current_page + 1})']")
                if not next_button:
                    break
                next_button.click()
                page.wait_for_function(
                    "() => document.querySelectorAll('table.table-striped.table-hover tbody tr').length > 0",
                    timeout=30000
                )
                current_page += 1
                sleep(2)
            except Exception as e:
                print(f"Error during page {current_page} processing: {e}")
                break

        for data in collected_data:
            page.goto(data["weblink"])
            page.wait_for_load_state("networkidle")

            date_elem = page.query_selector("div.panel .col-xs-12.col-md-3 .well b")
            date = date_elem.inner_text().strip() if date_elem else None
            if date and len(date.split(".")) == 3:
                dt = datetime.strptime(date, "%Y.%m.%d")
                date = dt.strftime("%Y-%m-%d")
            elif date:
                date = date.replace('.', '-')

            credit_elem = page.query_selector("div.panel .col-xs-12.col-md-6 .well a")
            credit = credit_elem.inner_text().strip() if credit_elem else None

            risk_elem = page.query_selector("div.panel .col-xs-5.col-md-3 .well span.label")
            risk = risk_elem.inner_text().strip() if risk_elem else None

            remote = None
            for u in page.query_selector_all("div.panel .well u"):
                if "remote" in u.inner_text().strip().lower():
                    parent = u.evaluate_handle("node => node.parentElement")
                    if parent:
                        remote_value_elem = parent.query_selector("b")
                        remote = remote_value_elem.inner_text().strip() if remote_value_elem else None
                    break

            cve = None
            for u in page.query_selector_all("div.panel .well u"):
                if "cve" in u.inner_text().strip().lower():
                    parent = u.evaluate_handle("node => node.parentElement")
                    if parent:
                        cve_elem = parent.query_selector("b")
                        cve = cve_elem.inner_text().strip() if cve_elem else None
                    break

            cwe = None
            for u in page.query_selector_all("div.panel .well u"):
                if "cwe" in u.inner_text().strip().lower():
                    parent = u.evaluate_handle("node => node.parentElement")
                    if parent:
                        cwe_elem = parent.query_selector("b")
                        cwe = cwe_elem.inner_text().strip() if cwe_elem else None
                    break

            code_area = page.query_selector("div.premex")
            code_snippet = "\n".join(code_area.inner_text().strip().splitlines()[:100]) if code_area else None

            data["date"] = date
            data["credit"] = credit
            data["risk"] = risk
            data["remote"] = remote
            data["cve"] = cve
            data["cwe"] = cwe
            data["code_snippet"] = code_snippet

            card_data = exploit_model(
                m_title=data["title"],
                m_url=page.url,
                m_base_url=base_url,
                m_content=data["title"],
                m_network=helper_method.get_network_type(base_url),
                m_important_content=data["title"],
                m_weblink=[data["weblink"]],
                m_content_type=["cve"],
                m_leak_date=data["date"]
            )
            entity_data = entity_model(
                m_code_snippet=[code_snippet],
                m_name=data["credit"] if data["credit"] else [],
                m_risk=[data["risk"]] if data["risk"] else [],
                m_remote_type=[data["remote"]] if data["remote"] else [],
                m_cve=[data["cve"]] if data["cve"] else [],
                m_cwe=[data["cwe"]] if data["cwe"] else [],
            )
            self.append_leak_data(card_data, entity_data)
