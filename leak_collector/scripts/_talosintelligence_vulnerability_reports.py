from abc import ABC
from typing import List
from playwright.sync_api import Page
from crawler.crawler_instance.local_interface_model.leak.leak_extractor_interface import leak_extractor_interface
from crawler.crawler_instance.local_shared_model.data_model.entity_model import entity_model
from crawler.crawler_instance.local_shared_model.data_model.leak_model import leak_model
from crawler.crawler_instance.local_shared_model.rule_model import RuleModel, FetchProxy, FetchConfig
from crawler.crawler_services.redis_manager.redis_controller import redis_controller
from crawler.crawler_services.shared.helper_method import helper_method
from urllib.parse import urljoin
from time import sleep
from datetime import datetime


class _talosintelligence_vulnerability_reports(leak_extractor_interface, ABC):
    _instance = None

    def __init__(self, callback=None):
        self.callback = callback
        self._card_data = []
        self._entity_data = []
        self.soup = None
        self._initialized = None
        self._redis_instance = redis_controller()

    def init_callback(self, callback=None):
        self.callback = callback

    def __new__(cls, callback=None):
        if cls._instance is None:
            cls._instance = super(_talosintelligence_vulnerability_reports, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    @property
    def seed_url(self) -> str:
        return "https://talosintelligence.com/vulnerability_reports"

    @property
    def base_url(self) -> str:
        return "https://0dayfans.com"

    @property
    def rule_config(self) -> RuleModel:
        return RuleModel(m_fetch_proxy=FetchProxy.NONE, m_fetch_config=FetchConfig.PLAYRIGHT)

    @property
    def card_data(self) -> List[leak_model]:
        return self._card_data

    @property
    def entity_data(self) -> List[entity_model]:
        return self._entity_data

    def invoke_db(self, command: int, key: str, default_value, expiry: int = None):
        return self._redis_instance.invoke_trigger(command, [key + self.__class__.__name__, default_value, expiry])

    def contact_page(self) -> str:
        return "https://www.iana.org/help/example-domains"

    def append_leak_data(self, leak: leak_model, entity: entity_model):
        self._card_data.append(leak)
        self._entity_data.append(entity)
        if self.callback:
            self.callback()

    def parse_leak_data(self, page: Page):
        try:
            base_url = f"{page.url.split('/')[0]}//{page.url.split('/')[2]}"
            collected_data = []
            current_page = 1
            page_limit = 201

            while current_page <= page_limit:
                try:
                    page.wait_for_selector("#vul-report tbody > tr", timeout=30000)
                except Exception as e:
                    print(f"Error waiting for rows: {e}")
                    break

                rows = page.query_selector_all("#vul-report tbody > tr")
                if not rows:
                    break

                for row_index, row in enumerate(rows):
                    try:
                        report_id_elem = row.query_selector("td:nth-child(1) a")
                        report_id = report_id_elem.inner_text().strip() if report_id_elem else None

                        title_elem = row.query_selector("td:nth-child(2) a")
                        title = title_elem.inner_text().strip() if title_elem else None

                        date_elem = row.query_selector("td:nth-child(3) a")
                        report_date = date_elem.inner_text().strip() if date_elem else None

                        cve_elem = row.query_selector("td:nth-child(4) a")
                        cve_number = cve_elem.inner_text().strip() if cve_elem else None

                        cvss_elem = row.query_selector("td:nth-child(5) a")
                        cvss_score = cvss_elem.inner_text().strip() if cvss_elem else None
                       
                        weblink = urljoin(base_url, title_elem.get_attribute("href")) if title_elem else None

                        if not title or not weblink or not report_id:
                            continue

                        collected_data.append({
                            "report_id": report_id,
                            "title": title,
                            "report_date": report_date,
                            "cve_number": cve_number,
                            "cvss_score": cvss_score,
                            "weblink": weblink
                        })

                    except Exception as e:
                        print(f"Error processing row {row_index + 1}: {e}")

                try:
                    page.wait_for_selector("#vul-report_paginate", timeout=30000)
                    next_button = page.query_selector("#vul-report_next")
                    if not next_button or "disabled" in (next_button.get_attribute("class") or ""):
                        break

                    next_button.click()
                    page.wait_for_function(
                        """
                        () => document.querySelectorAll("#vul-report tbody > tr").length > 0
                        """,
                        timeout=30000
                    )
                    current_page += 1
                    sleep(2)
                except Exception as e:
                    print(f"Error handling pagination: {e}")
                    break

            for data in collected_data:
                try:
                    page.goto(data["weblink"])
                    page.wait_for_load_state("networkidle")
                    page.wait_for_selector("div#page_wrapper", timeout=30000)
                    code_area = page.query_selector("div#page_wrapper")
                    code_snippet = "\n".join(code_area.inner_text().strip().splitlines()[:100]) if code_area else None
                    if not code_snippet:
                        continue
                    data["code_snippet"] = code_snippet

                    card_data = leak_model(
                        m_title=data["title"],
                        m_url=data["weblink"],
                        m_base_url=base_url,
                        m_screenshot="",
                        m_content=data["title"],
                        m_network=helper_method.get_network_type(base_url),
                        m_important_content=data["title"],
                        m_weblink=[data["weblink"]],
                        m_dumplink=[],
                        m_content_type=["cve"],
                        m_leak_date=data["report_date"]
                    )
                    entity_data = entity_model(
                        m_email=helper_method.extract_emails(code_snippet),
                        m_phone_numbers=helper_method.extract_phone_numbers(code_snippet),
                        m_code_snippet=code_snippet,
                        m_report_id=[data["report_id"]] if data["report_id"] else [],
                        m_cve_number=[data["cve_number"]] if data["cve_number"] else [],
                        m_cvss_score=[data["cvss_score"]] if data["cvss_score"] else [],
                    )
                    self.append_leak_data(card_data, entity_data)
                except Exception as e:
                    print(f"Error visiting detail page for {data['title']}: {e}")

        except Exception as e:
            print(f"An error occurred while parsing leak data: {e}")