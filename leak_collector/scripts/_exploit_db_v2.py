from abc import ABC
from datetime import datetime
from time import sleep
from typing import List
from playwright.sync_api import Page
from crawler.crawler_instance.local_interface_model.leak.leak_extractor_interface import leak_extractor_interface
from crawler.crawler_instance.local_shared_model.data_model.entity_model import entity_model
from crawler.crawler_instance.local_shared_model.data_model.leak_model import leak_model
from crawler.crawler_instance.local_shared_model.rule_model import RuleModel, FetchProxy, FetchConfig
from crawler.crawler_services.redis_manager.redis_controller import redis_controller
from crawler.crawler_services.shared.helper_method import helper_method
from urllib.parse import urljoin


class _exploit_db_v2(leak_extractor_interface, ABC):
    _instance = None

    def __init__(self, callback=None):
        self.callback = callback
        self._card_data = []
        self._entity_data = []
        self.soup = None
        self._initialized = None
        self._redis_instance = redis_controller()

    def init_callback(self, callback=None):
        self.callback = callback

    def __new__(cls, callback=None):
        if cls._instance is None:
            cls._instance = super(_exploit_db_v2, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    @property
    def seed_url(self) -> str:
        return "https://www.exploit-db.com"

    @property
    def base_url(self) -> str:
        return "https://www.exploit-db.com"

    @property
    def rule_config(self) -> RuleModel:
        return RuleModel(m_fetch_proxy=FetchProxy.NONE, m_fetch_config=FetchConfig.PLAYRIGHT)

    @property
    def card_data(self) -> List[leak_model]:
        return self._card_data

    @property
    def entity_data(self) -> List[entity_model]:
        return self._entity_data

    def invoke_db(self, command: int, key: str, default_value, expiry: int = None):
        return self._redis_instance.invoke_trigger(command, [key + self.__class__.__name__, default_value, expiry])

    def contact_page(self) -> str:
        return "https://x.com/exploitdb"

    def append_leak_data(self, leak: leak_model, entity: entity_model):
        self._card_data.append(leak)
        self._entity_data.append(entity)
        if self.callback:
            self.callback()

    def parse_leak_data(self, page: Page):
        try:
            base_url = f"{page.url.split('/')[0]}//{page.url.split('/')[2]}"
            collected_data = []
            page_limit = 3088
            current_page = 1

            while current_page <= page_limit:
                try:
                    page.wait_for_selector("#exploits-table tbody > tr[role='row']", timeout=30000)
                except Exception as e:
                    print(f"Error waiting for rows: {e}")
                    break

                rows = page.query_selector_all("#exploits-table tbody > tr[role='row']")
                if not rows:
                    break

                for row_index, row in enumerate(rows):
                    try:
                        date_raw = row.query_selector("td:nth-child(1)").inner_text().strip() if row.query_selector(
                            "td:nth-child(1)") else None
                        date = datetime.strptime(date_raw, "%Y-%m-%d").date() if date_raw else None

                        dumplink = urljoin(base_url, row.query_selector("td:nth-child(2) a").get_attribute(
                            "href")) if row.query_selector("td:nth-child(2) a") else None
                        title_element = row.query_selector("td:nth-child(5) a")
                        title = title_element.inner_text().strip() if title_element else None
                        weblink = urljoin(base_url, title_element.get_attribute("href")) if title_element else None

                        type_value = row.query_selector("td:nth-child(6) a").get_attribute(
                            "value").strip() if row.query_selector("td:nth-child(6) a") else None
                        platform = row.query_selector("td:nth-child(7) a").get_attribute(
                            "value").strip() if row.query_selector("td:nth-child(7) a") else None
                        author = row.query_selector("td:nth-child(8) a").inner_text().strip() if row.query_selector(
                            "td:nth-child(8) a") else None

                        if not title or not weblink or not dumplink:
                            continue

                        collected_data.append({
                            "title": title,
                            "weblink": weblink,
                            "dumplink": dumplink,
                            "date": date,
                            "type": type_value,
                            "platform": platform,
                            "author": author
                        })

                    except Exception as e:
                        print(f"Error processing row {row_index + 1}: {e}")

                try:
                    page.wait_for_selector("div#exploits-table_paginate", timeout=30000)
                    next_button = page.query_selector("li#exploits-table_next")
                    if next_button.evaluate("(el) => el.classList.contains('disabled')"):
                        break

                    next_button.query_selector("a.page-link").click()
                    page.wait_for_function(
                        """
                        () => document.querySelectorAll("#exploits-table tbody > tr").length > 0
                        """,
                        timeout=30000
                    )
                    current_page += 1
                    sleep(2)

                except Exception as e:
                    print(f"Error handling pagination: {e}")
                    break

            for data in collected_data:
                try:
                    page.goto(data["weblink"])
                    page.wait_for_load_state("networkidle")
                    page.wait_for_selector("div.card-body", timeout=30000)

                    card_body = page.query_selector("div.code-toolbar")
                    code_snippet = "\n".join(
                        card_body.inner_text().strip().splitlines()[:100]) if card_body else None

                    if not code_snippet:
                        continue

                    data["code_snippet"] = code_snippet

                    card_data = leak_model(
                        m_title=data["title"],
                        m_url=page.url,
                        m_base_url=base_url,
                        m_screenshot="",
                        m_content=data["title"],
                        m_network=helper_method.get_network_type(base_url),
                        m_important_content=data["title"],
                        m_weblink=[data["weblink"]],
                        m_dumplink=[data["dumplink"]],
                        m_content_type=["cve"],
                        m_leak_date=data["date"]
                    )
                    entity_data = entity_model(
                        m_email=helper_method.extract_emails(code_snippet),
                        m_phone_numbers=helper_method.extract_phone_numbers(code_snippet),
                        m_type=[data["type"]] if data["type"] else [],
                        m_platform=[data["platform"]] if data["platform"] else [],
                        m_author=[data["author"]] if data["author"] else [],
                        m_code_snippet=code_snippet,
                    )
                    self.append_leak_data(card_data, entity_data)

                except Exception as e:
                    print(f"Error visiting detail page for {data['title']}: {e}")

        except Exception as e:
            print(f"An error occurred while parsing leak data: {e}")